#!/usr/bin/env bash

export LANG=C
export LC_ALL=C

# Exit on error.
set -e

# Initialize variables.
newinit=
newroot=/
putold=/._tmp_reinit/oldroot
umount=d
newpwd=/
nochdir=1
for i in inject nokill nostop keepfd; do
	eval $i=0
done

# Parse options.
options="$(getopt -o i:r:o:bjw::ksfuhV -l newinit: -l newroot: -l putold: -l bbinit  -l inject -l wd:: -l nokill -l nostop -l keepfd -l umount -l no-umount -l help -l version -s bash -n reinit -- "$@")" || (echo "Try 'reinit --help' for more information." && exit 22)
eval set -- "$options"

while true; do
	case "$1" in
	-i|--newinit)
		newinit="/$2"
		shift 2
	;;
	-r|--newroot)
		newroot="/$2"
		shift 2
	;;
	-o|--putold)
		putold="/$2"
		shift 2
	;;
	-b|--bbinit)
		newinit='/._tmp_reinit/busybox'
		shift
	;;

	-j|--inject)
		inject=1
		shift
	;;
	-w|--wd)
		nochdir=0
		newpwd="/$2"
		shift 2
	;;
	-k|--nokill)
		nokill=1
		shift
	;;
	-s|--nostop)
		nostop=1
		shift
	;;
	-f|--keepfd)
		keepfd=1
		shift
	;;
	-u|--umount)
		umount=1
		shift
	;;
	--no-umount)
		umount=0
		shift
	;;

	-h|--help)
		cat << END

Usage:
 reinit [-i <newinit>] [-r <newroot> [-o <putold>]] [options] [-- init_options]

Restart init.

Options:
 -i, --newinit=  the file to execute as the new init;     default: current init
 -r, --newroot=  the mountpoint to use as new root;       default: /
 -o, --putold=   the path to mount the old root if --newroot is set;  default: /._tmp_reinit/putold
 -b, --bbinit    use busybox as the new init; you'll need to spicify an applet in init_options

 -j, --inject     inject code into the init to force a restart, even if it is not responsive
 -w, --wd=?       change working directory to the specified dir before starting init;  default: not changed || /
 -k, --nokill     do not kill old processes; PIDs of old processes will be stored in environment variable \$oldproc
 -s, --nostop     do not stop old processes (implies --nokill); may make the kernel panic when used with -r
 -f, --keepfd     do not close fds for the new init
 -u, --umount     umount /proc, /dev, /sys, /run, /tmp (default when newroot == / && !nostop)
     --no-umount  do not umount /proc, /dev, /sys, /run, /tmp (default in other circumstancies)

 -h, --help     display this help
 -V, --version  display version
END
		exit 0
		shift 2
	;;
	-V|--version)
		echo 'reinit 2.0.0-beta0'
		exit 0
		shift 2
	;;
	--)
		shift
		initargs=("$@")
		break
		shift 2
	;;
	*)
		echo "ERROR: Invalid option."
		echo "Try 'reinit --help' for more information."
		exit 22
	;;
	esac
done

# Validate options and check the environment.

# Environment checks

busybox_path="$(realpath "$(dirname -- "$0")"/busybox)"

qwhich() {
	which -- "$@" >/dev/null 2>/dev/null </dev/null || return $?
	return $?
}

if ! qwhich which; then
	qwhich() {
		"$busybox_path" which -- "$@" >/dev/null 2>/dev/null </dev/null || return $?
		return $?
	}
fi

if ! qwhich "$(dirname -- "$0")"/{clearfd,login_tty,busybox,takeover_process,initenv}; then
	echo "ERROR: Unable to find clearfd, login_tty, busybox, takeover_process or initenv."
	exit 22
fi

if [ "$(id -u)" != 0 ]; then
	echo "ERROR: Insufficient privillege. Please run this script as root."
	exit 1
fi

if ! qwhich telinit && ! qwhich systemctl; then
	echo "ERROR: Unknown current init. Please try again with --inject."
	exit 22
fi

# Validate initargs when the new init is busybox.

if [ "x$newinit" == 'x/._tmp_reinit/busybox' ]; then

	if [ "x${initargs[*]}" == "x" ]; then
		echo 'ERROR: No busybox applet specified.'
		exit 22
	fi

	bbapplets=($("$busybox_path" --list))
	bbvalidapplet=0
	for i in "${bbapplets[@]}"; do
		if [ "x$i" == "x${initargs[0]}" ]; then
			bbvalidapplet=1
		fi
	done
	
	if [ $bbvalidapplet == 0 ]; then
		echo 'ERROR: Invalid busybox applet `'"${initargs[0]}'"'.'
		exit 22
	fi
fi

# Validate newroot.

if ! realpath -- "$newroot" >/dev/null 2>/dev/null </dev/null; then
	echo 'ERROR: newroot `'"$newroot'"' does not exist.'
	exit 22
fi

newroot="$(realpath -- "$newroot")"

if [ ! -d "$newroot" ]; then
	echo 'ERROR: newroot `'"$newroot'"' is not a directory.'
	exit 22
fi

if [ "x$newroot" != 'x/' ] && ! mountpoint -q -- "$newroot"; then
	echo 'ERROR: newroot `'"$newroot'"' must be a mountpoint.'
	echo "NOTE: Please mount --bind newroot newroot if newroot is not mounted before using the script."
	exit 22
fi

if [ "x$newroot" != 'x/' ] && ! mountpoint -q /; then
	echo 'ERROR: / must be a mountpoint.'
	echo "NOTE: Please mount --bind / / if / is not mounted before using the script."
	exit 22
fi

# Validate newinit.

current_init="$(readlink /proc/1/exe)"

if [ -z "$newinit" ]; then
	if qwhich "$newroot/usr/lib/systemd/systemd"; then
		newinit="/usr/lib/systemd/systemd"
	fi
	if qwhich "$newroot/sbin/init"; then
		newinit="/sbin/init"
	fi
	if [ "x$newroot" == 'x/' ] && qwhich "$current_init"; then
		newinit="$current_init"
	fi
fi

if [ "x$newinit" != 'x/._tmp_reinit/busybox' ] && ! qwhich "$newroot/$newinit"; then
	echo 'ERROR: newinit `'"$newroot/$newinit'"' is not executable.'
	exit 22
fi

# Validate putold.

if ! mkdir -p -- "$newroot/$putold" >/dev/null 2>/dev/null; then
	echo 'ERROR: putold `'"$newroot/$putold'"' or one of it'"'"'s ancestors exists and is not a directory.'
	exit 22
fi

putold="$(realpath -- "$newroot/$putold")"
putold="${putold:${#newroot}}"

if [ "x$newroot" == 'x/' ]; then
	putold=/
fi

if [ "x$newroot" != 'x/' -a -z "$putold" ]; then
	echo 'ERROR: putold `'"$newroot'"' and newroot are the same directory.'
	exit 22
fi

# Validate wd.

if ! mkdir -p -- "$newroot/$newpwd" >/dev/null 2>/dev/null; then
	echo 'ERROR: new working directory `'"$newroot/$newpwd'"' or one of it'"'"'s ancestors exists and is not a directory.'
	exit 22
fi

newpwd="$(realpath -- "$newroot/$newpwd")"
newpwd="${newpwd:${#newroot}}"
if [ -z "$newpwd" ]; then
	newpwd='/'
fi

if [ "x$newroot" != 'x/' ]; then
	nochdir=0
fi

# nostop implies nokill.

if [ "$nostop" == 1 ]; then
	nokill=1
fi

# umount

if [ $umount == d ]; then
	if [ "x$newroot" == 'x/' -a $nostop == 0 ]; then
		umount=1
	else
		umount=0
	fi
fi

# Initialize.

mkdir -p -- "$newroot"/._tmp_reinit /._tmp_reinit
cp -- "$(dirname "$0")"/{busybox,busybox_aliases,clearfd,initenv,login_tty,prepare,reinit,takeover_process} "$newroot"/._tmp_reinit/
cp -- "$(dirname "$0")"/{busybox,busybox_aliases,clearfd,initenv,login_tty,prepare,reinit,takeover_process} /._tmp_reinit/

cd -- "$newroot"

mkdir -p dev proc

# Save options.
printf "%d %d %d %d %d %d %d %d\n" $nostop $nokill $keepfd $nostop 4 $inject $umount $nochdir >/._tmp_reinit/options
printf "%s" "0" >/._tmp_reinit/failed
printf "%s" "$newinit" >/._tmp_reinit/newinit
printf "%s" "$newroot" >/._tmp_reinit/newroot
printf "%s" "$putold" >/._tmp_reinit/putold
printf "%s" "$newpwd" >/._tmp_reinit/newpwd
escaped_initrgs="$(getopt -o '' -- -- "${initargs[@]}")"
escaped_initrgs="${escaped_initrgs:4}"
printf "%s" "$escaped_initrgs" >/._tmp_reinit/initargs
printf "%s" "$current_init" >/._tmp_reinit/current_init

# Mount the fake init on the current init.
if [ $inject != 1 ]; then
	mount --bind -- ._tmp_reinit/initenv "$current_init"
fi

trap '' $(kill -l | sed 's/\s/\n/g' | grep '[a-zA-Z]')
set +e

# Restart init.
sync
if [ $inject == 1 ]; then
	(env -i ._tmp_reinit/takeover_process 1 "/._tmp_reinit/initenv" "/._tmp_reinit/initenv" &)
else
	(telinit u >/dev/null 2>/dev/null </dev/null &)
	(systemctl daemon-reexec >/dev/null 2>/dev/null </dev/null &)
fi
sync
